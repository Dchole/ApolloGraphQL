type Query {
  launches(limit: Int, page: Int, isBooked: Boolean): LaunchConnection!
  launch(id: ID!): Launch!
  network: String!
  me: User!
}

type Mutation {
  bookTrip(launchId: ID!): TripUpdateResponse!
  cancelTrip(launchId: ID!): TripUpdateResponse!
  login(email: String!, password: String!): String!
  signUp(username: String!, email: String!, password: String!): String!
}

type LaunchConnection {
  hasMore: Boolean!
  launches: [Launch!]!
}

type TripUpdateResponse {
  success: Boolean!
  message: String!
  launch: Launch!
}

type Launch {
  id: ID!
  name: String!
  details: String
  patch(size: EPatchSize): String
  rocket: Rocket
  isBooked: Boolean!
  links: Links!
}

type Links {
  article: String
  video: String
}

type Rocket {
  id: ID!
  name: String!
  type: String!
}

type User {
  id: ID!
  username: String!
  email: String!
  trips: [Launch!]!
}

enum EPatchSize {
  SMALL
  LARGE
}
